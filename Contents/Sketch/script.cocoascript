var sketch = require('sketch')
const document = sketch.getSelectedDocument()

// var platformTokens = require('../Resources/platform-tokens.js')
// var typography = require('../Resources/new-typo.js')
// var prominence = require('../Resources/prominence.js')

const sketchTokens = require('../Resources/sketchTokens.js')
const colorTokens = sketchTokens.colors
const textTokens = sketchTokens.text
const prominenceTokens = sketchTokens.prominence

// https://developer.sketch.com/reference/api/

var overwriteAll = function (context) {
  overwriteColors()
  overwriteTextStyles()
  overwriteLayerStyles()
}

var addAll = function (context) {
  addColors()
  addTextStyles()
  addLayerStyles()
}

function deleteAll(context) {
  document.colors = []
  document.sharedTextStyles = []
  document.sharedLayerStyles = []
}

function overwriteColors(context) {
  document.colors = generateColors();
}

function addColors(context) {
  document.colors.push(...generateColors())
}

function overwriteTextStyles(context) {
  // document.sharedTextStyles = generateTextStyles();
  setStyles(document.sharedTextStyles, generateTextStyles(), true)

}

function addTextStyles(context) {
  document.sharedTextStyles.push(...generateTextStyles())
}

function overwriteLayerStyles(context) {
  // document.sharedLayerStyles = generateLayerStyles()
  // document.sharedLayerStyles = mergeNamedArrays(document.sharedLayerStyles, generateLayerStyles())
  setStyles(document.sharedLayerStyles, generateLayerStyles())
}

function addLayerStyles(context) {
  document.sharedLayerStyles.push(...generateLayerStyles())
}

function generateColors() {
  return colorTokens.map(color => ({
    name: cssNameToSketch(color.name.substring(10)),
    color: color.value
  }))
}

function generateTextStyles(context) {
  const textStyles = []
  const textColorTokens = colorTokens.filter(color => color.type === 'text')
  const textAlignment = [
    {
      name: 'left',
      value: sketch.Text.Alignment.left
    },
    {
      name: 'center',
      value: sketch.Text.Alignment.center
    },
    {
      name: 'right',
      value: sketch.Text.Alignment.right
    },
  ]
  textTokens.forEach(textToken => {
    textColorTokens.forEach(textColor => {
      const textColorName = textColor.name.substring(15)
      textAlignment.forEach(textAlign => {
        const styleName = `${textToken.name.substring(9)}-${textColorName}-${textAlign.name}`
        textStyles.push({
          name: cssNameToSketch(styleName),
          style: {
            lineHeight: textToken.value.lineHeight,
            fontSize: textToken.value.fontSize,
            fontFamily: textToken.value.fontFamily,
            fontWeight: textToken.value.fontWeight,
            textTransform: textToken.value.textTransform,
            textColor: textColor.value,
            alignment: textAlign.value,
            borders: []
          }
        })
      })
    })
  })
  return textStyles
}

function generateLayerStyles() {

  let fillStyles = []
  let borderStyles = []
  let lineStyles = []

  colorTokens
    // .filter(color=>color.docs.type !== 'text') // keeping text styles for flexibility
    .forEach(color => {

      if (color.type === 'border') {

        // Borders with inset lines
        borderStyles.push({
          name: cssNameToSketch(color.name.substring(10)),
          style: {
            borders: [{
              color: color.value,
              position: sketch.Style.BorderPosition.Inside
            }],
          }
        })

        // Lines have centered line positions
        lineStyles.push({
          name: cssNameToSketch(color.name.substring(10).replace('border', 'line')),
          style: {
            borders: [{
              color: color.value,
              position: sketch.Style.BorderPosition.Center
            }],
          }
        })

      } else {

        fillStyles.push({
          name: cssNameToSketch(color.name.substring(10)),
          style: {
            fills: [{
              color: color.value,
            }],
            borders: []
          }
        })

      }
    })

  let prominenceStyles = prominenceTokens.map(prom => {
    return {
      name: cssNameToSketch(prom.name.substring(4)),
      style: {
        shadows: prom.value,
        borders: []
      }
    }
  })

  let noneStyle = [{
    name: 'None',
    style: {
      fills: [],
      borders: []
    }
  }]

  const layerStyles = [].concat(
    fillStyles,
    borderStyles,
    // lineStyles, // replace 'border' with 'line' tokens will be confuse?
    prominenceStyles,
    noneStyle
  )

  return layerStyles
}

// UTIL FUNCTIONS // 
const cssNameToSketch = string => string.split('-').map(substring => stringCapitalizeFistLetter(substring)).join('/')
const stringCapitalizeFistLetter = string => string.charAt(0).toUpperCase() + string.slice(1)

function mergeNamedArrays(oldArray, newArr) {

  const mergedMap = {}

  oldArray.forEach(oldItem => {
    mergedMap[oldItem.name] = oldItem
  })

  newArr.forEach(newItem => {
    if (mergedMap[newItem.name] == null) {
      // add a new item
      mergedMap[newItem.name] = newItem
    } else {
      // overwrite, but keep the id
      const id = mergedMap[newItem.name].id
      mergedMap[newItem.name] = newItem
      mergedMap[newItem.name].id = id
    }
  })

  const mergedArray = []

  for (const name in mergedMap) {
    if (mergedMap.hasOwnProperty(name)) {
      const item = mergedMap[name];
      mergedArray.push(item)
    }
  }

  console.log(mergedArray);
  return mergedArray

}

function setStyles(currentStyles, newStyles, isText = false) {

  // map name to id
  const oldStylesMap = {}
  currentStyles.forEach(currentStyle => {
    oldStylesMap[currentStyle.name] = currentStyle.id
  })

  newStyles.forEach(newStyle => {

    // TODO: test which one of these is better
    const newStyleId = oldStylesMap[newStyle.name]
    // const currentLayerStyle = document.getSharedLayerStyleWithID(id)

    if (newStyleId == null) {
      // it doesn't exist, so add it
      currentStyles.push(newStyle)
    } else {
      // it does exist, so update it
      const currentStyle = isText
        ? document.getSharedTextStyleWithID(newStyleId)
        : document.getSharedLayerStyleWithID(newStyleId)
      currentStyle.style = {
        ...currentStyle.style,
        ...newStyle.style
      }
    }

  })


}