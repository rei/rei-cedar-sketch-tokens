var sketch = require('sketch')
const document = sketch.getSelectedDocument()

var platformTokens = require('../Resources/platform-tokens.js')
var typography = require('../Resources/new-typo.js')
var prominence = require('../Resources/prominence.js')

const sketchTokens = require('../Resources/sketchTokens.js')
const colorTokens = sketchTokens.colors
const textTokens = sketchTokens.text
const prominenceTokens = sketchTokens.prominence

// https://developer.sketch.com/reference/api/

var overwriteAll = function (context) {
  overwriteColors()
  overwriteTextStyles()
  overwriteLayerStyles()
}

var addAll = function (context) {
  addColors()
  addTextStyles()
  addLayerStyles()
}

function overwriteColors(context) {
  document.colors = generateColors();
}

function addColors(context) {
  document.colors.push(...generateColors())
}

function overwriteTextStyles(context) {
  document.sharedTextStyles = generateTextStyles();
}

function addTextStyles(context) {
  document.sharedTextStyles.push(...generateTextStyles())
}

function overwriteLayerStyles(context) {
  document.sharedLayerStyles = generateLayerStyles()
}

function addLayerStyles(context) {
  document.sharedLayerStyles.push(...generateLayerStyles())
}

function generateColors() {
  log(platformTokens.global.colors.map(color => ({
    name: color.name,
    value: color.value,
    type: color.docs.type
  })))
  return platformTokens.global.colors.map(color => ({
    name: cssNameToSketch(color.name.substring(10)),
    color: color.value
  }))
}

function generateTextStyles(context) {
  const textTokens = []
  const typoColors = platformTokens.global.colors.filter(color => color.docs.type === 'text')
  const typoAlignment = [
    {
      name: 'left',
      value: sketch.Text.Alignment.left
    },
    {
      name: 'center',
      value: sketch.Text.Alignment.center
    },
    {
      name: 'right',
      value: sketch.Text.Alignment.right
    },
  ]
  typography.forEach(typoStyle => {
    typoColors.forEach(typoColor => {
      const typoColorName = typoColor.name.substring(15)
      typoAlignment.forEach(typoAlign => {
        const styleName = `${typoStyle.name.substring(9)}-${typoColorName}-${typoAlign.name}`
        textTokens.push({
          name: cssNameToSketch(styleName),
          style: {
            lineHeight: typoStyle.value.lineHeight,
            fontSize: typoStyle.value.fontSize,
            fontFamily: typoStyle.value.fontFamily,
            fontWeight: typoStyle.value.fontWeight,
            textTransform: typoStyle.value.textTransform,
            textColor: typoColor.value,
            alignment: typoAlign.value,
            borders: []
          }
        })
      })
    })
  })
  return textTokens
}

function generateLayerStyles() {
  let layerStyles = platformTokens.global.colors
    // .filter(color=>color.docs.type !== 'text') // keeping text styles for flexibility
    .map(color => {
      return {
        name: cssNameToSketch(color.name.substring(10)),
        style: {
          fills: color.docs.type === 'border' ? [] : [{
            color: color.value,
          }],
          borders: color.docs.type !== 'border' ? [] : [{
            color: color.value,
            position: sketch.Style.BorderPosition.Inside
          }],
        }
      }
    })
  layerStyles = layerStyles.concat(prominence.map(prom => {
    return {
      name: cssNameToSketch(prom.name.substring(4)),
      style: {
        shadows: prom.value,
        borders: []
      }
    }
  }))
  return layerStyles
}

// UTIL FUNCTIONS // 
const cssNameToSketch = string => string.split('-').map(substring => stringCapitalizeFistLetter(substring)).join('/')
const stringCapitalizeFistLetter = string => string.charAt(0).toUpperCase() + string.slice(1)
